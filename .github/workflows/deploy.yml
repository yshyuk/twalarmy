# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.


name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: ap-northeast-2                   # set this to your preferred AWS region, e.g. us-west-1
  APPLICATION_NAME: alarmy-test                # CodeDeploy 애플리케이션 이름
  DEPLOYMENT_GROUP: master                     # CodeDeploy 배포 그룹 이름
  WAR_FILE: alarmy-0.0.1-SNAPSHOT.war          # war 파일 이름
  TAR_FILE: application.tar.gz                 # tar 파일 이름
  ASG_NAME: blue-green-setting                 # auto-scale  그룹
  INSTANCE_NAME: alarmy                        # instance 이름
  TEMPLATE_NAME: alarmy-template
  IAM_ROLE_NAME: DemoRoleForEC2
  DEPLOY_PATH: /home/ec2-user

permissions:
  contents: read

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Package WAR into TAR
      run: |
        mkdir -p package
        cp build/libs/${{ env.WAR_FILE }} package/
        tar -czf ${{ env.TAR_FILE }} -C package .
        
    - name: Check TAR file
      run: |
        ls -l build/libs
        echo "TAR_FILE=$(ls build/libs/*.tar | head -n 1)" >> $GITHUB_ENV
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        PRIVATE_KEY: ${{secrets.EC2_SSH_PRIVATE_KEY}}

    - name: Upload TAR to S3
      run: |
        ls -R build/libs
        aws s3 cp ${{ env.TAR_FILE }} s3://${{ env.S3_BUCKET }}/${{ env.TAR_FILE }}

    - name: Deploy to EC2 via CodeDeploy
      run: |
        aws deploy create-deployment \
          --application-name ${{env.APPLICATION_NAME}} \
          --deployment-group-name ${{env.DEPLOYMENT_GROUP}} \
          --s3-location bucket=innovate-something-ec2-bucket,key=${{env.TAR_FILE}},bundleType=tgz \
          --file-exists-behavior OVERWRITE

    - name: Update Launch Template
      run: |
        LATEST_VERSION=$(aws ec2 describe-launch-template-versions \
          --launch-template-name ${{ env.TEMPLATE_NAME }} \
          --versions '$Latest' \
          --query 'LaunchTemplateVersions[0].VersionNumber' \
          --output text)
        
        NEW_VERSION=$(aws ec2 create-launch-template-version \
          --launch-template-name ${{ env.TEMPLATE_NAME }} \
          --version-description "Updated version with IAM role" \
          --source-version $LATEST_VERSION \
          --launch-template-data '{"IamInstanceProfile":{"Name":"${{ env.IAM_ROLE_NAME }}"}}' \
          --query 'LaunchTemplateVersion.VersionNumber' \
          --output text)
        
        aws ec2 modify-launch-template \
          --launch-template-name ${{ env.TEMPLATE_NAME }} \
          --default-version $NEW_VERSION

    - name: Wait for deployment to complete
      run: |
        aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID --debug

    - name: Create AMI
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ env.INSTANCE_NAME }}" --query 'Reservations[].Instances[].InstanceId' --output text)
        
        AMI_ID=$(aws ec2 create-image \
          --instance-id $INSTANCE_ID \
          --name "AMI-${{ github.sha }}" \
          --description "AMI created from successful deployment" \
          --query 'ImageId' --output text)
        
        echo "Created AMI: $AMI_ID"

    - name: Update Launch Template
      run: |
        TEMPLATE_ID=$(aws ec2 describe-launch-templates --filters "Name=tag:Name,Values=${{ env.ASG_NAME }}-template" --query 'LaunchTemplates[].LaunchTemplateId' --output text)
        
        NEW_VERSION=$(aws ec2 create-launch-template-version \
          --launch-template-id $TEMPLATE_ID \
          --source-version '$Latest' \
          --launch-template-data '{"ImageId":"'$AMI_ID'"}' \
          --query 'LaunchTemplateVersion.VersionNumber' --output text)
        
        echo "Created new launch template version: $NEW_VERSION"
        
        aws ec2 modify-launch-template \
          --launch-template-id $TEMPLATE_ID \
          --default-version $NEW_VERSION

    - name: Perform Blue/Green Deployment
      run: |
        NEW_ASG_NAME="${{ env.ASG_NAME }}-$(date +%Y%m%d%H%M%S)"
        
        aws autoscaling create-auto-scaling-group \
          --auto-scaling-group-name $NEW_ASG_NAME \
          --launch-template LaunchTemplateId=$TEMPLATE_ID,Version='$Latest' \
          --min-size 1 \
          --max-size 3 \
          --desired-capacity 2 \
          --target-group-arns $(aws elbv2 describe-target-groups --names ${{ env.ASG_NAME }}-tg --query 'TargetGroups[].TargetGroupArn' --output text) \
          --vpc-zone-identifier $(aws ec2 describe-subnets --filters "Name=tag:Name,Values=${{ env.ASG_NAME }}-subnet" --query 'Subnets[].SubnetId' --output json | jq -r 'join(",")')
        
        aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name ${{ env.ASG_NAME }} \
          --min-size 0 \
          --max-size 0 \
          --desired-capacity 0
        
        aws autoscaling delete-auto-scaling-group \
          --auto-scaling-group-name ${{ env.ASG_NAME }} \
          --force-delete
        
        aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name $NEW_ASG_NAME \
          --auto-scaling-group-name ${{ env.ASG_NAME }}
